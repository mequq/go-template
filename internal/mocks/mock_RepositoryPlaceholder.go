// Code generated by mockery. DO NOT EDIT.

package mocks

import (
	context "context"

	mock "github.com/stretchr/testify/mock"
)

// MockRepositoryPlaceholder is an autogenerated mock type for the RepositoryPlaceholder type
type MockRepositoryPlaceholder struct {
	mock.Mock
}

type MockRepositoryPlaceholder_Expecter struct {
	mock *mock.Mock
}

func (_m *MockRepositoryPlaceholder) EXPECT() *MockRepositoryPlaceholder_Expecter {
	return &MockRepositoryPlaceholder_Expecter{mock: &_m.Mock}
}

// Create provides a mock function with given fields: ctx
func (_m *MockRepositoryPlaceholder) Create(ctx context.Context) error {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for Create")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context) error); ok {
		r0 = rf(ctx)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockRepositoryPlaceholder_Create_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Create'
type MockRepositoryPlaceholder_Create_Call struct {
	*mock.Call
}

// Create is a helper method to define mock.On call
//   - ctx context.Context
func (_e *MockRepositoryPlaceholder_Expecter) Create(ctx interface{}) *MockRepositoryPlaceholder_Create_Call {
	return &MockRepositoryPlaceholder_Create_Call{Call: _e.mock.On("Create", ctx)}
}

func (_c *MockRepositoryPlaceholder_Create_Call) Run(run func(ctx context.Context)) *MockRepositoryPlaceholder_Create_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *MockRepositoryPlaceholder_Create_Call) Return(_a0 error) *MockRepositoryPlaceholder_Create_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockRepositoryPlaceholder_Create_Call) RunAndReturn(run func(context.Context) error) *MockRepositoryPlaceholder_Create_Call {
	_c.Call.Return(run)
	return _c
}

// Delete provides a mock function with given fields: ctx, id
func (_m *MockRepositoryPlaceholder) Delete(ctx context.Context, id int64) error {
	ret := _m.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for Delete")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, int64) error); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockRepositoryPlaceholder_Delete_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Delete'
type MockRepositoryPlaceholder_Delete_Call struct {
	*mock.Call
}

// Delete is a helper method to define mock.On call
//   - ctx context.Context
//   - id int64
func (_e *MockRepositoryPlaceholder_Expecter) Delete(ctx interface{}, id interface{}) *MockRepositoryPlaceholder_Delete_Call {
	return &MockRepositoryPlaceholder_Delete_Call{Call: _e.mock.On("Delete", ctx, id)}
}

func (_c *MockRepositoryPlaceholder_Delete_Call) Run(run func(ctx context.Context, id int64)) *MockRepositoryPlaceholder_Delete_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(int64))
	})
	return _c
}

func (_c *MockRepositoryPlaceholder_Delete_Call) Return(_a0 error) *MockRepositoryPlaceholder_Delete_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockRepositoryPlaceholder_Delete_Call) RunAndReturn(run func(context.Context, int64) error) *MockRepositoryPlaceholder_Delete_Call {
	_c.Call.Return(run)
	return _c
}

// Get provides a mock function with given fields: ctx, id
func (_m *MockRepositoryPlaceholder) Get(ctx context.Context, id int64) error {
	ret := _m.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for Get")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, int64) error); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockRepositoryPlaceholder_Get_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Get'
type MockRepositoryPlaceholder_Get_Call struct {
	*mock.Call
}

// Get is a helper method to define mock.On call
//   - ctx context.Context
//   - id int64
func (_e *MockRepositoryPlaceholder_Expecter) Get(ctx interface{}, id interface{}) *MockRepositoryPlaceholder_Get_Call {
	return &MockRepositoryPlaceholder_Get_Call{Call: _e.mock.On("Get", ctx, id)}
}

func (_c *MockRepositoryPlaceholder_Get_Call) Run(run func(ctx context.Context, id int64)) *MockRepositoryPlaceholder_Get_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(int64))
	})
	return _c
}

func (_c *MockRepositoryPlaceholder_Get_Call) Return(_a0 error) *MockRepositoryPlaceholder_Get_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockRepositoryPlaceholder_Get_Call) RunAndReturn(run func(context.Context, int64) error) *MockRepositoryPlaceholder_Get_Call {
	_c.Call.Return(run)
	return _c
}

// List provides a mock function with given fields: ctx
func (_m *MockRepositoryPlaceholder) List(ctx context.Context) error {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for List")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context) error); ok {
		r0 = rf(ctx)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockRepositoryPlaceholder_List_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'List'
type MockRepositoryPlaceholder_List_Call struct {
	*mock.Call
}

// List is a helper method to define mock.On call
//   - ctx context.Context
func (_e *MockRepositoryPlaceholder_Expecter) List(ctx interface{}) *MockRepositoryPlaceholder_List_Call {
	return &MockRepositoryPlaceholder_List_Call{Call: _e.mock.On("List", ctx)}
}

func (_c *MockRepositoryPlaceholder_List_Call) Run(run func(ctx context.Context)) *MockRepositoryPlaceholder_List_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *MockRepositoryPlaceholder_List_Call) Return(_a0 error) *MockRepositoryPlaceholder_List_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockRepositoryPlaceholder_List_Call) RunAndReturn(run func(context.Context) error) *MockRepositoryPlaceholder_List_Call {
	_c.Call.Return(run)
	return _c
}

// Update provides a mock function with given fields: ctx, id
func (_m *MockRepositoryPlaceholder) Update(ctx context.Context, id int64) error {
	ret := _m.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for Update")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, int64) error); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockRepositoryPlaceholder_Update_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Update'
type MockRepositoryPlaceholder_Update_Call struct {
	*mock.Call
}

// Update is a helper method to define mock.On call
//   - ctx context.Context
//   - id int64
func (_e *MockRepositoryPlaceholder_Expecter) Update(ctx interface{}, id interface{}) *MockRepositoryPlaceholder_Update_Call {
	return &MockRepositoryPlaceholder_Update_Call{Call: _e.mock.On("Update", ctx, id)}
}

func (_c *MockRepositoryPlaceholder_Update_Call) Run(run func(ctx context.Context, id int64)) *MockRepositoryPlaceholder_Update_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(int64))
	})
	return _c
}

func (_c *MockRepositoryPlaceholder_Update_Call) Return(_a0 error) *MockRepositoryPlaceholder_Update_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockRepositoryPlaceholder_Update_Call) RunAndReturn(run func(context.Context, int64) error) *MockRepositoryPlaceholder_Update_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockRepositoryPlaceholder creates a new instance of MockRepositoryPlaceholder. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockRepositoryPlaceholder(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockRepositoryPlaceholder {
	mock := &MockRepositoryPlaceholder{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// Code generated by mockery. DO NOT EDIT.

package mocks

import (
	sampleentity "application/internal/entity/sample"
	context "context"

	mock "github.com/stretchr/testify/mock"
)

// MockSampleEntityRepoInterface is an autogenerated mock type for the SampleEntityRepoInterface type
type MockSampleEntityRepoInterface struct {
	mock.Mock
}

type MockSampleEntityRepoInterface_Expecter struct {
	mock *mock.Mock
}

func (_m *MockSampleEntityRepoInterface) EXPECT() *MockSampleEntityRepoInterface_Expecter {
	return &MockSampleEntityRepoInterface_Expecter{mock: &_m.Mock}
}

// Create provides a mock function with given fields: ctx, sampleEntity
func (_m *MockSampleEntityRepoInterface) Create(ctx context.Context, sampleEntity *sampleentity.Sample) (uint64, error) {
	ret := _m.Called(ctx, sampleEntity)

	if len(ret) == 0 {
		panic("no return value specified for Create")
	}

	var r0 uint64
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *sampleentity.Sample) (uint64, error)); ok {
		return rf(ctx, sampleEntity)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *sampleentity.Sample) uint64); ok {
		r0 = rf(ctx, sampleEntity)
	} else {
		r0 = ret.Get(0).(uint64)
	}

	if rf, ok := ret.Get(1).(func(context.Context, *sampleentity.Sample) error); ok {
		r1 = rf(ctx, sampleEntity)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockSampleEntityRepoInterface_Create_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Create'
type MockSampleEntityRepoInterface_Create_Call struct {
	*mock.Call
}

// Create is a helper method to define mock.On call
//   - ctx context.Context
//   - sampleEntity *sampleentity.Sample
func (_e *MockSampleEntityRepoInterface_Expecter) Create(ctx interface{}, sampleEntity interface{}) *MockSampleEntityRepoInterface_Create_Call {
	return &MockSampleEntityRepoInterface_Create_Call{Call: _e.mock.On("Create", ctx, sampleEntity)}
}

func (_c *MockSampleEntityRepoInterface_Create_Call) Run(run func(ctx context.Context, sampleEntity *sampleentity.Sample)) *MockSampleEntityRepoInterface_Create_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*sampleentity.Sample))
	})
	return _c
}

func (_c *MockSampleEntityRepoInterface_Create_Call) Return(id uint64, err error) *MockSampleEntityRepoInterface_Create_Call {
	_c.Call.Return(id, err)
	return _c
}

func (_c *MockSampleEntityRepoInterface_Create_Call) RunAndReturn(run func(context.Context, *sampleentity.Sample) (uint64, error)) *MockSampleEntityRepoInterface_Create_Call {
	_c.Call.Return(run)
	return _c
}

// Delete provides a mock function with given fields: ctx, id
func (_m *MockSampleEntityRepoInterface) Delete(ctx context.Context, id uint64) error {
	ret := _m.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for Delete")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, uint64) error); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockSampleEntityRepoInterface_Delete_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Delete'
type MockSampleEntityRepoInterface_Delete_Call struct {
	*mock.Call
}

// Delete is a helper method to define mock.On call
//   - ctx context.Context
//   - id uint64
func (_e *MockSampleEntityRepoInterface_Expecter) Delete(ctx interface{}, id interface{}) *MockSampleEntityRepoInterface_Delete_Call {
	return &MockSampleEntityRepoInterface_Delete_Call{Call: _e.mock.On("Delete", ctx, id)}
}

func (_c *MockSampleEntityRepoInterface_Delete_Call) Run(run func(ctx context.Context, id uint64)) *MockSampleEntityRepoInterface_Delete_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(uint64))
	})
	return _c
}

func (_c *MockSampleEntityRepoInterface_Delete_Call) Return(_a0 error) *MockSampleEntityRepoInterface_Delete_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockSampleEntityRepoInterface_Delete_Call) RunAndReturn(run func(context.Context, uint64) error) *MockSampleEntityRepoInterface_Delete_Call {
	_c.Call.Return(run)
	return _c
}

// List provides a mock function with given fields: ctx
func (_m *MockSampleEntityRepoInterface) List(ctx context.Context) ([]*sampleentity.Sample, error) {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for List")
	}

	var r0 []*sampleentity.Sample
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) ([]*sampleentity.Sample, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) []*sampleentity.Sample); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*sampleentity.Sample)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockSampleEntityRepoInterface_List_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'List'
type MockSampleEntityRepoInterface_List_Call struct {
	*mock.Call
}

// List is a helper method to define mock.On call
//   - ctx context.Context
func (_e *MockSampleEntityRepoInterface_Expecter) List(ctx interface{}) *MockSampleEntityRepoInterface_List_Call {
	return &MockSampleEntityRepoInterface_List_Call{Call: _e.mock.On("List", ctx)}
}

func (_c *MockSampleEntityRepoInterface_List_Call) Run(run func(ctx context.Context)) *MockSampleEntityRepoInterface_List_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *MockSampleEntityRepoInterface_List_Call) Return(_a0 []*sampleentity.Sample, _a1 error) *MockSampleEntityRepoInterface_List_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockSampleEntityRepoInterface_List_Call) RunAndReturn(run func(context.Context) ([]*sampleentity.Sample, error)) *MockSampleEntityRepoInterface_List_Call {
	_c.Call.Return(run)
	return _c
}

// Update provides a mock function with given fields: ctx, sampleEntity
func (_m *MockSampleEntityRepoInterface) Update(ctx context.Context, sampleEntity *sampleentity.Sample) error {
	ret := _m.Called(ctx, sampleEntity)

	if len(ret) == 0 {
		panic("no return value specified for Update")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *sampleentity.Sample) error); ok {
		r0 = rf(ctx, sampleEntity)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockSampleEntityRepoInterface_Update_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Update'
type MockSampleEntityRepoInterface_Update_Call struct {
	*mock.Call
}

// Update is a helper method to define mock.On call
//   - ctx context.Context
//   - sampleEntity *sampleentity.Sample
func (_e *MockSampleEntityRepoInterface_Expecter) Update(ctx interface{}, sampleEntity interface{}) *MockSampleEntityRepoInterface_Update_Call {
	return &MockSampleEntityRepoInterface_Update_Call{Call: _e.mock.On("Update", ctx, sampleEntity)}
}

func (_c *MockSampleEntityRepoInterface_Update_Call) Run(run func(ctx context.Context, sampleEntity *sampleentity.Sample)) *MockSampleEntityRepoInterface_Update_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*sampleentity.Sample))
	})
	return _c
}

func (_c *MockSampleEntityRepoInterface_Update_Call) Return(_a0 error) *MockSampleEntityRepoInterface_Update_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockSampleEntityRepoInterface_Update_Call) RunAndReturn(run func(context.Context, *sampleentity.Sample) error) *MockSampleEntityRepoInterface_Update_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockSampleEntityRepoInterface creates a new instance of MockSampleEntityRepoInterface. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockSampleEntityRepoInterface(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockSampleEntityRepoInterface {
	mock := &MockSampleEntityRepoInterface{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

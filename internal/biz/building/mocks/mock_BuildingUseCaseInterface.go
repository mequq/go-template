// Code generated by mockery. DO NOT EDIT.

package mocks

import (
	buildingusecase "application/internal/biz/building"
	context "context"

	mock "github.com/stretchr/testify/mock"
)

// MockBuildingUseCaseInterface is an autogenerated mock type for the BuildingUseCaseInterface type
type MockBuildingUseCaseInterface struct {
	mock.Mock
}

type MockBuildingUseCaseInterface_Expecter struct {
	mock *mock.Mock
}

func (_m *MockBuildingUseCaseInterface) EXPECT() *MockBuildingUseCaseInterface_Expecter {
	return &MockBuildingUseCaseInterface_Expecter{mock: &_m.Mock}
}

// CreateBuilding provides a mock function with given fields: ctx, building
func (_m *MockBuildingUseCaseInterface) CreateBuilding(ctx context.Context, building *buildingusecase.Building) error {
	ret := _m.Called(ctx, building)

	if len(ret) == 0 {
		panic("no return value specified for CreateBuilding")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *buildingusecase.Building) error); ok {
		r0 = rf(ctx, building)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockBuildingUseCaseInterface_CreateBuilding_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateBuilding'
type MockBuildingUseCaseInterface_CreateBuilding_Call struct {
	*mock.Call
}

// CreateBuilding is a helper method to define mock.On call
//   - ctx context.Context
//   - building *buildingusecase.Building
func (_e *MockBuildingUseCaseInterface_Expecter) CreateBuilding(ctx interface{}, building interface{}) *MockBuildingUseCaseInterface_CreateBuilding_Call {
	return &MockBuildingUseCaseInterface_CreateBuilding_Call{Call: _e.mock.On("CreateBuilding", ctx, building)}
}

func (_c *MockBuildingUseCaseInterface_CreateBuilding_Call) Run(run func(ctx context.Context, building *buildingusecase.Building)) *MockBuildingUseCaseInterface_CreateBuilding_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*buildingusecase.Building))
	})
	return _c
}

func (_c *MockBuildingUseCaseInterface_CreateBuilding_Call) Return(_a0 error) *MockBuildingUseCaseInterface_CreateBuilding_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockBuildingUseCaseInterface_CreateBuilding_Call) RunAndReturn(run func(context.Context, *buildingusecase.Building) error) *MockBuildingUseCaseInterface_CreateBuilding_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteBuilding provides a mock function with given fields: ctx, id
func (_m *MockBuildingUseCaseInterface) DeleteBuilding(ctx context.Context, id int) error {
	ret := _m.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for DeleteBuilding")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, int) error); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockBuildingUseCaseInterface_DeleteBuilding_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteBuilding'
type MockBuildingUseCaseInterface_DeleteBuilding_Call struct {
	*mock.Call
}

// DeleteBuilding is a helper method to define mock.On call
//   - ctx context.Context
//   - id int
func (_e *MockBuildingUseCaseInterface_Expecter) DeleteBuilding(ctx interface{}, id interface{}) *MockBuildingUseCaseInterface_DeleteBuilding_Call {
	return &MockBuildingUseCaseInterface_DeleteBuilding_Call{Call: _e.mock.On("DeleteBuilding", ctx, id)}
}

func (_c *MockBuildingUseCaseInterface_DeleteBuilding_Call) Run(run func(ctx context.Context, id int)) *MockBuildingUseCaseInterface_DeleteBuilding_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(int))
	})
	return _c
}

func (_c *MockBuildingUseCaseInterface_DeleteBuilding_Call) Return(_a0 error) *MockBuildingUseCaseInterface_DeleteBuilding_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockBuildingUseCaseInterface_DeleteBuilding_Call) RunAndReturn(run func(context.Context, int) error) *MockBuildingUseCaseInterface_DeleteBuilding_Call {
	_c.Call.Return(run)
	return _c
}

// GetBuilding provides a mock function with given fields: ctx, id
func (_m *MockBuildingUseCaseInterface) GetBuilding(ctx context.Context, id int) (*buildingusecase.Building, error) {
	ret := _m.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for GetBuilding")
	}

	var r0 *buildingusecase.Building
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int) (*buildingusecase.Building, error)); ok {
		return rf(ctx, id)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int) *buildingusecase.Building); ok {
		r0 = rf(ctx, id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*buildingusecase.Building)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, int) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockBuildingUseCaseInterface_GetBuilding_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetBuilding'
type MockBuildingUseCaseInterface_GetBuilding_Call struct {
	*mock.Call
}

// GetBuilding is a helper method to define mock.On call
//   - ctx context.Context
//   - id int
func (_e *MockBuildingUseCaseInterface_Expecter) GetBuilding(ctx interface{}, id interface{}) *MockBuildingUseCaseInterface_GetBuilding_Call {
	return &MockBuildingUseCaseInterface_GetBuilding_Call{Call: _e.mock.On("GetBuilding", ctx, id)}
}

func (_c *MockBuildingUseCaseInterface_GetBuilding_Call) Run(run func(ctx context.Context, id int)) *MockBuildingUseCaseInterface_GetBuilding_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(int))
	})
	return _c
}

func (_c *MockBuildingUseCaseInterface_GetBuilding_Call) Return(_a0 *buildingusecase.Building, _a1 error) *MockBuildingUseCaseInterface_GetBuilding_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockBuildingUseCaseInterface_GetBuilding_Call) RunAndReturn(run func(context.Context, int) (*buildingusecase.Building, error)) *MockBuildingUseCaseInterface_GetBuilding_Call {
	_c.Call.Return(run)
	return _c
}

// GetBuildings provides a mock function with given fields: ctx
func (_m *MockBuildingUseCaseInterface) GetBuildings(ctx context.Context) ([]*buildingusecase.Building, error) {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for GetBuildings")
	}

	var r0 []*buildingusecase.Building
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) ([]*buildingusecase.Building, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) []*buildingusecase.Building); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*buildingusecase.Building)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockBuildingUseCaseInterface_GetBuildings_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetBuildings'
type MockBuildingUseCaseInterface_GetBuildings_Call struct {
	*mock.Call
}

// GetBuildings is a helper method to define mock.On call
//   - ctx context.Context
func (_e *MockBuildingUseCaseInterface_Expecter) GetBuildings(ctx interface{}) *MockBuildingUseCaseInterface_GetBuildings_Call {
	return &MockBuildingUseCaseInterface_GetBuildings_Call{Call: _e.mock.On("GetBuildings", ctx)}
}

func (_c *MockBuildingUseCaseInterface_GetBuildings_Call) Run(run func(ctx context.Context)) *MockBuildingUseCaseInterface_GetBuildings_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *MockBuildingUseCaseInterface_GetBuildings_Call) Return(_a0 []*buildingusecase.Building, _a1 error) *MockBuildingUseCaseInterface_GetBuildings_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockBuildingUseCaseInterface_GetBuildings_Call) RunAndReturn(run func(context.Context) ([]*buildingusecase.Building, error)) *MockBuildingUseCaseInterface_GetBuildings_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateBuilding provides a mock function with given fields: ctx, building
func (_m *MockBuildingUseCaseInterface) UpdateBuilding(ctx context.Context, building *buildingusecase.Building) error {
	ret := _m.Called(ctx, building)

	if len(ret) == 0 {
		panic("no return value specified for UpdateBuilding")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *buildingusecase.Building) error); ok {
		r0 = rf(ctx, building)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockBuildingUseCaseInterface_UpdateBuilding_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateBuilding'
type MockBuildingUseCaseInterface_UpdateBuilding_Call struct {
	*mock.Call
}

// UpdateBuilding is a helper method to define mock.On call
//   - ctx context.Context
//   - building *buildingusecase.Building
func (_e *MockBuildingUseCaseInterface_Expecter) UpdateBuilding(ctx interface{}, building interface{}) *MockBuildingUseCaseInterface_UpdateBuilding_Call {
	return &MockBuildingUseCaseInterface_UpdateBuilding_Call{Call: _e.mock.On("UpdateBuilding", ctx, building)}
}

func (_c *MockBuildingUseCaseInterface_UpdateBuilding_Call) Run(run func(ctx context.Context, building *buildingusecase.Building)) *MockBuildingUseCaseInterface_UpdateBuilding_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*buildingusecase.Building))
	})
	return _c
}

func (_c *MockBuildingUseCaseInterface_UpdateBuilding_Call) Return(_a0 error) *MockBuildingUseCaseInterface_UpdateBuilding_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockBuildingUseCaseInterface_UpdateBuilding_Call) RunAndReturn(run func(context.Context, *buildingusecase.Building) error) *MockBuildingUseCaseInterface_UpdateBuilding_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockBuildingUseCaseInterface creates a new instance of MockBuildingUseCaseInterface. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockBuildingUseCaseInterface(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockBuildingUseCaseInterface {
	mock := &MockBuildingUseCaseInterface{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

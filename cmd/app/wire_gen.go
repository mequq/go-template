// Code generated by Wire. DO NOT EDIT.

//go:generate go run -mod=mod github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package main

import (
	"application/app"
	"application/internal/biz"
	"application/internal/datasource"
	"application/internal/repo"
	"application/internal/service"
	"application/internal/service/handler"
	"context"
	"net/http"
)

// Injectors from wire.go:

func wireApp(ctx context.Context) (app.Application, error) {
	runTimeFlags := app.NewRunTimeFlags()
	kConfig, err := app.NewKoanfConfig(runTimeFlags)
	if err != nil {
		return nil, err
	}
	appConfig, err := app.NewAppConfig(ctx, kConfig)
	if err != nil {
		return nil, err
	}
	httpServerConfig, err := app.NewHTTPServerConfig(ctx, kConfig)
	if err != nil {
		return nil, err
	}
	appLoggerConfig, err := app.NewAppLoggerConfig(kConfig)
	if err != nil {
		return nil, err
	}
	collectorConfig, err := app.NewCollectorConfig(ctx, kConfig)
	if err != nil {
		return nil, err
	}
	controller := app.NewController()
	otlp, err := app.NewOTLP(ctx, collectorConfig, appConfig, controller, httpServerConfig)
	if err != nil {
		return nil, err
	}
	appLogger, err := app.NewAppLogger(ctx, appConfig, appLoggerConfig, otlp)
	if err != nil {
		return nil, err
	}
	logger := app.NewSlogLogger(appLogger)
	serveMux := http.NewServeMux()
	inmemoryDB := datasource.NewInmemoryDB(logger)
	healthz := repo.NewHealthzDS(logger, inmemoryDB)
	bizHealthz := biz.NewHealthz(healthz, logger)
	healthzHandler := handler.NewMuxHealthzHandler(bizHealthz, logger, serveMux)
	v := handler.NewServiceList(healthzHandler)
	httpHandler, err := service.NewHTTPHandler(ctx, logger, serveMux, v...)
	if err != nil {
		return nil, err
	}
	httpServer := app.NewHTTPServer(httpServerConfig, httpHandler)
	appApp := app.NewApp(runTimeFlags, appConfig, httpServer, appLogger, controller)
	return appApp, nil
}
